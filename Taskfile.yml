version: '3'

vars:
  PASSWORD: Passw0rd
  DOMAIN: localhost
  PORT: "8080"
  COOKIE_FILE: cookies.txt
  LOGIN_NAME: alex@test.com
  LOGIN_PASSWORD: P@ssw0rd
  SITE: "{{.DOMAIN}}:{{.PORT}}"
  REDIRECT_URI: "http://127.0.0.1:8088"
  CLIENT_ID: cli

env:
  AUTH_PORT: "{{.PORT}}"
  AUTH_REDIS_SESSION_DB: auth-session
  AUTH_REDIS_TOKEN_DB: auth-token
  AUTH_APPLICATION_NAME: Auth Server
  AUTH_DOMAIN: localhost
  PGPASSWORD: "{{.PASSWORD}}"

tasks:

  default:
    cmds:
      - task: build

  build:
    desc: Go build without output
    cmds:
    - go build -tags=nomsgpack -o /dev/null

  run-debug:
    desc: Run with debug logs
    deps: [up-db, swagger]
    silent: true
    env:
      AUTH_DATABASE_CONNECTION_STRING_FILE_PATH: ./keys/database_connection_string
      AUTH_REDIS_HOST: localhost:6379
      AUTH_REDIS_PASSWORD_FILE_PATH: ./keys/redis_password
      AUTH_KEY_ID: testing
      AUTH_PRIVATE_KEY_PATH: ./keys/ecdsa.key
      AUTH_PRIVATE_KEY_PASSWORD_FILE_PATH: ./keys/passphrase
      AUTH_WEBFINGER_EMAIL: alex@test.com
      AUTH_FRONTEND_ENDPOINTS: true
      AUTH_SEED_USERS_FILE_PATH: import_users.json
    cmds:
    - go run -tags=nomsgpack main.go

  run:
    desc: Run without debug logs
    deps: [up-db, swagger]
    silent: true
    env:
      AUTH_DATABASE_CONNECTION_STRING_FILE_PATH: ./keys/database_connection_string
      AUTH_REDIS_HOST: localhost:6379
      AUTH_REDIS_PASSWORD_FILE_PATH: ./keys/redis_password
      GIN_MODE: release
      AUTH_RELEASE: true
      AUTH_KEY_ID: testing
      AUTH_PRIVATE_KEY_PATH: ./keys/ecdsa.key
      AUTH_PRIVATE_KEY_PASSWORD_FILE_PATH: ./keys/passphrase
      AUTH_WEBFINGER_EMAIL: alex@test.com
      AUTH_ENFORCE_PKCE: false
      AUTH_FRONTEND_ENDPOINTS: true
      AUTH_SEED_USERS_FILE_PATH: import_users.json
    cmds:
    - go run -tags=nomsgpack main.go

  test-signup:
    desc: test signup with xh
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    cmds:
    - xh post http://{{.SITE}}/signup email={{.LOGIN_NAME}} password={{.LOGIN_PASSWORD}}

  test-login:
    desc: test login with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmds:
    - curl -i -X POST http://{{.SITE}}/signin -d email={{.LOGIN_NAME}} -d password={{.LOGIN_PASSWORD}} -c {{.COOKIE_FILE}}

  test-login-domain:
    desc: test login with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
    - curl -i -X POST https://$AUTH_DOMAIN/signin -d email={{.LOGIN_NAME}} -d password={{.LOGIN_PASSWORD}} -c {{.COOKIE_FILE}}

  test-password:
    desc: test login with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmds:
    - curl -i -X POST http://{{.SITE}}/signin/challenge -d password={{.LOGIN_PASSWORD}} -b {{.COOKIE_FILE}}

  test-password-domain:
    desc: test login with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
    - curl -i -X POST https://$AUTH_DOMAIN/signin/challenge -d password={{.LOGIN_PASSWORD}} -b {{.COOKIE_FILE}}

  test-logout:
    desc: test logout with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmds:
    - curl -i -X POST http://{{.SITE}}/signout -b {{.COOKIE_FILE}}

  test-logout-domain:
    desc: test logout with cURL
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
    - curl -i -X POST https://$AUTH_DOMAIN/signout -b {{.COOKIE_FILE}}

  test-authorize:
    desc: test authorization endpoint with cURL
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmds:
    - curl -sSk -X GET -b {{.COOKIE_FILE}} -D - -o /dev/null "http://{{.SITE}}/authorize?client_id={{.CLIENT_ID}}&redirect_uri={{.REDIRECT_URI}}&response_type=code"

  test-authorize-domain:
    desc: test authorization endpoint with cURL
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
      - curl -sSk -X GET -b {{.COOKIE_FILE}} -D - -o /dev/null "https://$AUTH_DOMAIN/authorize?client_id={{.CLIENT_ID}}&redirect_uri={{.REDIRECT_URI}}&response_type=code"

  test-token:
    desc: test authorization and token endpoint with cURL
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which awk)\" ]"
      msg: awk is not installed
    - sh: "[ ! -z \"$(which grep)\" ]"
      msg: grep is not installed
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    vars:
      TOKEN_ENDPOINT:
        sh: xh get http://{{.SITE}}/.well-known/openid-configuration | jq -r .token_endpoint
      AUTHORIZATION_CODE:
        sh: curl -sSk -X GET -b {{.COOKIE_FILE}} -D - -o /dev/null "http://{{.SITE}}/authorize?client_id={{.CLIENT_ID}}&redirect_uri={{.REDIRECT_URI}}&response_type=code" | grep Location | awk '{print $2 }' | awk -F '?' '{print $2}' | awk -F '=' '{print $2}'
    cmds:
    - curl -s -d grant_type=authorization_code -d code={{.AUTHORIZATION_CODE}} -d redirect_uri={{.REDIRECT_URI}} --user {{.CLIENT_ID}}:{{.LOGIN_PASSWORD}} {{.TOKEN_ENDPOINT}}

  test-token-domain:
    desc: test authorization and token endpoint with cURL
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which awk)\" ]"
      msg: awk is not installed
    - sh: "[ ! -z \"$(which grep)\" ]"
      msg: grep is not installed
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    vars:
      AUTHORIZATION_CODE:
        sh: curl -sSk -X GET -b {{.COOKIE_FILE}} -D - -o /dev/null "https://$AUTH_DOMAIN/authorize?client_id={{.CLIENT_ID}}&redirect_uri={{.REDIRECT_URI}}&response_type=code" | grep -i Location | awk '{print $2 }' | awk -F '?' '{print $2}' | awk -F '=' '{print $2}'
      TOKEN_ENDPOINT:
        sh: xh get https://$AUTH_DOMAIN/.well-known/openid-configuration | jq -r .token_endpoint
    cmds:
      - curl -s -d grant_type=authorization_code -d code={{.AUTHORIZATION_CODE}} -d redirect_uri={{.REDIRECT_URI}} --user {{.CLIENT_ID}}:{{.LOGIN_PASSWORD}} {{.TOKEN_ENDPOINT}}

  test-step:
    desc: test authorization and token endpoint with step
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which step)\" ]"
      msg: step is not installed
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    - sh: "[ ! -z \"$(which jq)\" ]"
      msg: jq is not installed
    vars:
      AUTH_ENDPOINT:
        sh: xh get http://{{.SITE}}/.well-known/openid-configuration | jq -r .authorization_endpoint
      TOKEN_ENDPOINT:
        sh: xh get http://{{.SITE}}/.well-known/openid-configuration | jq -r .token_endpoint
    cmds:
      - step oauth --client-id {{.CLIENT_ID}} --client-secret {{.LOGIN_PASSWORD}} --listen :8088 --authorization-endpoint {{.AUTH_ENDPOINT}} --token-endpoint {{.TOKEN_ENDPOINT}}

  test-step-domain:
    desc: test authorization and token endpoint with step
    silent: false
    preconditions:
    - sh: "[ ! -z \"$(which step)\" ]"
      msg: step is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
      - step oauth --client-id {{.CLIENT_ID}} --client-secret {{.LOGIN_PASSWORD}} --listen :8088 --provider https://$AUTH_DOMAIN

  test-client-list:
    desc: test client list with curl
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmd: curl -i http://{{.SITE}}/clients -b {{.COOKIE_FILE}}

  test-client-create:
    desc: test client create with curl
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which curl)\" ]"
      msg: curl is not installed
    cmd: curl -X POST 'http://{{.SITE}}/clients' -H "content-type:application/json" -H 'accept:application/json, */*;q=0.5' -d '{"client_id":"{{.CLIENT_ID}}","client_secret":"{{.LOGIN_PASSWORD}}","redirect_uri":"{{.REDIRECT_URI}}","user_email":"{{.LOGIN_NAME}}"}' -b {{.COOKIE_FILE}}

  image:
    desc: Docker build (e.g. task image -- dev)
    silent: true
    preconditions:
    - test -f Dockerfile
    - sh: docker version
    cmds:
    - docker build --target production -t docker.io/alexhokl/auth-server:{{ splitArgs .CLI_ARGS | first }} .

  up-db:
    desc: Spin up Docker containers of databases
    silent: true
    preconditions:
    - test -f docker-compose.yml
    - sh: docker version
    cmds:
    - docker-compose up db redis -d

  up:
    desc: Spin up all Docker containers
    silent: true
    preconditions:
    - test -f docker-compose.yml
    cmds:
    - docker-compose up -d

  down:
    desc: Stop and remove all Docker containers
    silent: true
    preconditions:
    - test -f docker-compose.yml
    - sh: docker version
    cmds:
    - docker-compose down

  caddy:
    desc: Start reverse proxy to port {{.PORT}}
    silent: true
    preconditions:
    - test -f Caddyfile
    cmds:
    - caddy run --config Caddyfile

  swagger:
    desc: Generate code of Swagger 2.0 documentation
    silent: true
    cmds:
    - swag init

  swagger-format:
    desc: Format Swagger comments in Go code
    silent: true
    cmds:
    - swag fmt

  swagger-open:
    desc: Open Swagger documentation in a browser
    silent: true
    cmds:
    - cmd: open http://{{.SITE}}/swagger/index.html
      platforms: [darwin, linux]
    - cmd: explorer http://{{.SITE}}/swagger/index.html
      platforms: [windows]

  test:
    desc: Run unit tests
    silent: true
    cmds:
    - go test -v ./...

  commit:
    desc: Show the current git commit ID
    silent: true
    vars:
      GIT_COMMIT:
        sh: git rev-parse --short HEAD
    cmds:
    - echo {{.GIT_COMMIT}}

  tidy:
    desc: Tidy up Go modules
    cmds:
    - go mod tidy

  list-tokens:
    desc: List keys of tokens stored on Redis
    env:
      REDISCLI_AUTH: "{{.PASSWORD}}"
    cmds:
    - redis-cli -h localhost KEYS auth-token\*

  list-sessions:
    desc: List keys of session stored on Redis
    env:
      REDISCLI_AUTH: "{{.PASSWORD}}"
    cmds:
    - redis-cli -h localhost KEYS auth-session\*

  # get-token:
  #   desc: Get value of code/token using key of Redis
  #   env:
  #     REDISCLI_AUTH: "{{.PASSWORD}}"
  #   vars:
  #     LAST_TOKEN:
  #       sh: redis-cli -h localhost KEYS auth-token\* | tail -n 1
  #   cmds:
  #   - echo {{.LAST_TOKEN}}
  #   - redis-cli -h localhost GET {{.LAST_TOKEN}}

  openid-configuration:
    desc: Shows configuration of OpenID
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    cmds:
      - xh http://{{.SITE}}/.well-known/openid-configuration

  openid-configuration-domain:
    desc: Shows configuration of OpenID
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
      - xh https://$AUTH_DOMAIN/.well-known/openid-configuration

  webfinger-configuration:
    desc: Shows configuration of WebFinger
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    cmds:
      - xh http://{{.SITE}}/.well-known/webfinger

  webfinger-configuration-domain:
    desc: Shows configuration of WebFinger
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which xh)\" ]"
      msg: xh is not installed
    - sh: "[ ! -z \"$(echo $AUTH_DOMAIN)\" ]"
      msg: environnment variable AUTH_DOMAIN is not configured
    cmds:
      - xh https://$AUTH_DOMAIN/.well-known/webfinger

  gen-key:
    desc: Generate keys
    interactive: true
    preconditions:
    - test -d keys
    cmds:
    - step crypto keypair keys/ecdsa.pub keys/ecdsa.key --kty EC --curve "P-256" --password-file keys/passphrase --force

  db-list-clients:
    desc: list clients in database
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which psql)\" ]"
      msg: psql is not installed
    - sh: "[ ! -z \"$(which cat)\" ]"
      msg: cat is not installed
    vars:
      CONNECTION_STRING:
        sh: cat keys/database_connection_string
    cmds:
    - psql "{{.CONNECTION_STRING}}" -c "SELECT * FROM clients"

  db-list-users:
    desc: list users in database
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which psql)\" ]"
      msg: psql is not installed
    - sh: "[ ! -z \"$(which cat)\" ]"
      msg: cat is not installed
    vars:
      CONNECTION_STRING:
        sh: cat keys/database_connection_string
    cmds:
    - psql "{{.CONNECTION_STRING}}" -c "SELECT * FROM users"

  db-list-user-credentials:
    desc: list user credentials in database
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which psql)\" ]"
      msg: psql is not installed
    - sh: "[ ! -z \"$(which cat)\" ]"
      msg: cat is not installed
    vars:
      CONNECTION_STRING:
        sh: cat keys/database_connection_string
    cmds:
    - psql "{{.CONNECTION_STRING}}" -c "SELECT * FROM user_credentials"

  db-remove-all-user-credentials:
    desc: remove all user credentials in database
    silent: true
    preconditions:
    - sh: "[ ! -z \"$(which psql)\" ]"
      msg: psql is not installed
    - sh: "[ ! -z \"$(which cat)\" ]"
      msg: cat is not installed
    vars:
      CONNECTION_STRING:
        sh: cat keys/database_connection_string
    cmds:
    - psql "{{.CONNECTION_STRING}}" -c "TRUNCATE TABLE user_credentials"

